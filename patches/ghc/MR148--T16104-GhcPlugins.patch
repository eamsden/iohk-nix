diff --git a/compiler/main/GhcPlugins.hs b/compiler/main/GhcPlugins.hs
index 3e0facf97b987138dc0e94983ecb78cc0268a8c0..56492377d8a5c7ba600cdd88456045ca2157b563 100644
--- a/compiler/main/GhcPlugins.hs
+++ b/compiler/main/GhcPlugins.hs
@@ -87,7 +87,7 @@ import Unique           ( Unique, Uniquable(..) )
 import FastString
 import Data.Maybe
 
-import NameCache (lookupOrigNameCache)
+import IfaceEnv         ( lookupOrigIO )
 import GhcPrelude
 import MonadUtils       ( mapMaybeM )
 import Convert          ( thRdrNameGuesses )
@@ -127,6 +127,6 @@ thNameToGhcName th_name
       | Just n <- isExact_maybe rdr_name   -- This happens in derived code
       = return $ if isExternalName n then Just n else Nothing
       | Just (rdr_mod, rdr_occ) <- isOrig_maybe rdr_name
-      = do { cache <- getOrigNameCache
-           ; return $ lookupOrigNameCache cache rdr_mod rdr_occ }
+      = do { hsc_env <- getHscEnv
+           ; Just <$> liftIO (lookupOrigIO hsc_env rdr_mod rdr_occ) }
       | otherwise = return Nothing
diff --git a/testsuite/driver/testlib.py b/testsuite/driver/testlib.py
index c09d02aab22fbfb02dd7783a0cb7387a53dca117..d1ab41dcc2ea045b0d426638989e176246387679 100644
--- a/testsuite/driver/testlib.py
+++ b/testsuite/driver/testlib.py
@@ -881,6 +881,8 @@ def do_test(name, way, func, args, files):
         if os.path.isfile(src):
             link_or_copy_file(src, dst)
         elif os.path.isdir(src):
+            if os.path.exists(dst):
+                shutil.rmtree(dst)
             os.mkdir(dst)
             lndir(src, dst)
         else:
diff --git a/testsuite/tests/plugins/Makefile b/testsuite/tests/plugins/Makefile
index 8a6af5b1187e810e69872abb4dd36d210a85b1d4..d913ca5108a261b2f203a9e01a6220e17f536151 100644
--- a/testsuite/tests/plugins/Makefile
+++ b/testsuite/tests/plugins/Makefile
@@ -121,3 +121,7 @@ plugin-recomp-change-prof:
 	"$(MAKE)" -s --no-print-directory -C plugin-recomp package.plugins01 TOP=$(TOP) RUN=-DRUN2
 	"$(TEST_HC)" $(TEST_HC_OPTS) $(ghcPluginWayFlags) -v0 plugin-recomp-test.hs -package-db plugin-recomp/pkg.plugins01/local.package.conf -fplugin PurePlugin
 	"$(TEST_HC)" $(TEST_HC_OPTS) -prof -osuf p_o -hisuf p_hi -v0 plugin-recomp-test.hs -package-db plugin-recomp/pkg.plugins01/local.package.conf -fplugin PurePlugin
+
+.PHONY: T16104
+T16104:
+	"$(TEST_HC)" $(TEST_HC_OPTS) $(ghcPluginWayFlags) -v0 T16104.hs -package-db T16104-plugin/pkg.T16104-plugin/local.package.conf
diff --git a/testsuite/tests/plugins/T16104-plugin/LICENSE b/testsuite/tests/plugins/T16104-plugin/LICENSE
new file mode 100644
index 0000000000000000000000000000000000000000..6297f71b3fdb05b1f3fe09b4c325704ac06d26ce
--- /dev/null
+++ b/testsuite/tests/plugins/T16104-plugin/LICENSE
@@ -0,0 +1,10 @@
+Copyright (c) 2008, Max Bolingbroke
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
+
+    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
+    * Neither the name of Max Bolingbroke nor the names of other contributors may be used to endorse or promote products derived from this software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
diff --git a/testsuite/tests/plugins/T16104-plugin/Makefile b/testsuite/tests/plugins/T16104-plugin/Makefile
new file mode 100644
index 0000000000000000000000000000000000000000..5a0289c99b8177fd584cb255b6a0eb50d3f8ec42
--- /dev/null
+++ b/testsuite/tests/plugins/T16104-plugin/Makefile
@@ -0,0 +1,18 @@
+TOP=../../..
+include $(TOP)/mk/boilerplate.mk
+include $(TOP)/mk/test.mk
+
+clean.%:
+	rm -rf pkg.$*
+
+HERE := $(abspath .)
+$(eval $(call canonicalise,HERE))
+
+package.%:
+	$(MAKE) -s --no-print-directory clean.$*
+	mkdir pkg.$*
+	"$(TEST_HC)" -outputdir pkg.$* --make -v0 -o pkg.$*/setup Setup.hs
+	"$(GHC_PKG)" init pkg.$*/local.package.conf
+	pkg.$*/setup configure --distdir pkg.$*/dist -v0 $(CABAL_PLUGIN_BUILD) --prefix="$(HERE)/pkg.$*/install" --with-compiler="$(TEST_HC)" --with-hc-pkg="$(GHC_PKG)" --package-db=pkg.$*/local.package.conf $(if $(findstring YES,$(HAVE_PROFILING)), --enable-library-profiling)
+	pkg.$*/setup build     --distdir pkg.$*/dist -v0
+	pkg.$*/setup install   --distdir pkg.$*/dist -v0
diff --git a/testsuite/tests/plugins/T16104-plugin/Setup.hs b/testsuite/tests/plugins/T16104-plugin/Setup.hs
new file mode 100644
index 0000000000000000000000000000000000000000..e8ef27dbba9992f80d9271a60892aadc63c9ef36
--- /dev/null
+++ b/testsuite/tests/plugins/T16104-plugin/Setup.hs
@@ -0,0 +1,3 @@
+import Distribution.Simple
+
+main = defaultMain
diff --git a/testsuite/tests/plugins/T16104-plugin/T16104-plugin.cabal b/testsuite/tests/plugins/T16104-plugin/T16104-plugin.cabal
new file mode 100644
index 0000000000000000000000000000000000000000..5288e8fa2cd2a6647cbd394e3b32c4dac1eb1267
--- /dev/null
+++ b/testsuite/tests/plugins/T16104-plugin/T16104-plugin.cabal
@@ -0,0 +1,11 @@
+Name:           T16104-plugin
+Version:        0.1
+Synopsis:       For testing
+Cabal-Version:  >= 1.2
+Build-Type:     Simple
+License:        BSD3
+License-File:   LICENSE
+
+Library
+    Build-Depends: base, ghc
+    Exposed-Modules: T16104_Plugin
diff --git a/testsuite/tests/plugins/T16104-plugin/T16104_Plugin.hs b/testsuite/tests/plugins/T16104-plugin/T16104_Plugin.hs
new file mode 100644
index 0000000000000000000000000000000000000000..79cd0fe16d84bdd65652debceb92b606f307e5b0
--- /dev/null
+++ b/testsuite/tests/plugins/T16104-plugin/T16104_Plugin.hs
@@ -0,0 +1,20 @@
+{-# LANGUAGE TemplateHaskell #-}
+
+module T16104_Plugin (plugin) where
+
+import GhcPlugins
+import Data.Bits
+
+plugin :: Plugin
+plugin = defaultPlugin {installCoreToDos = install}
+  where install _ todos = return (test : todos)
+
+        test = CoreDoPluginPass "Test" check
+
+        check :: ModGuts -> CoreM ModGuts
+        check m = do mbN <- thNameToGhcName 'complement
+                     case mbN of
+                       Just _  -> liftIO $ putStrLn "Found complement!"
+                       Nothing -> error "Failed to locate complement"
+
+                     return m
diff --git a/testsuite/tests/plugins/T16104.hs b/testsuite/tests/plugins/T16104.hs
new file mode 100644
index 0000000000000000000000000000000000000000..bfef69767d70d6a507d11db99434911ac65911ab
--- /dev/null
+++ b/testsuite/tests/plugins/T16104.hs
@@ -0,0 +1,4 @@
+{-# OPTIONS_GHC -fplugin T16104_Plugin #-}
+
+main :: IO ()
+main = return ()
diff --git a/testsuite/tests/plugins/T16104.stdout b/testsuite/tests/plugins/T16104.stdout
new file mode 100644
index 0000000000000000000000000000000000000000..a1eb7b6983dab359e7dab917a7c372c0feb868c5
--- /dev/null
+++ b/testsuite/tests/plugins/T16104.stdout
@@ -0,0 +1 @@
+Found complement!
diff --git a/testsuite/tests/plugins/all.T b/testsuite/tests/plugins/all.T
index da6294eae246d63234b5f7315dc74c184bbcb055..30b8fd6b2bf06902b2418e01e1daea86ab4dc9a4 100644
--- a/testsuite/tests/plugins/all.T
+++ b/testsuite/tests/plugins/all.T
@@ -7,27 +7,28 @@ setTestOpts(req_interp)
 
 test('plugins01',
      [extra_files(['simple-plugin/']), only_ways([config.ghc_plugin_way]),
-     when(opsys('mingw32'), multi_cpu_race),
+      when(opsys('mingw32'), multi_cpu_race),
       pre_cmd('$MAKE -s --no-print-directory -C simple-plugin package.plugins01 TOP={top}')],
      run_command, ['$MAKE -s --no-print-directory plugins01'])
 
 test('plugins02',
      [extra_files(['simple-plugin/']), only_ways([config.ghc_plugin_way]),
-     when(opsys('mingw32'), multi_cpu_race),
+      when(opsys('mingw32'), multi_cpu_race),
       pre_cmd('$MAKE -s --no-print-directory -C simple-plugin package.plugins02 TOP={top}')],
      compile_fail,
      ['-package-db simple-plugin/pkg.plugins02/local.package.conf -fplugin Simple.BadlyTypedPlugin -package simple-plugin ' + config.plugin_way_flags])
 
 test('plugins03',
      [extra_files(['simple-plugin/']), only_ways([config.ghc_plugin_way]),
-     when(opsys('mingw32'), multi_cpu_race),
+      when(opsys('mingw32'), multi_cpu_race),
       pre_cmd('$MAKE -s --no-print-directory -C simple-plugin package.plugins03 TOP={top}')],
      compile_fail,
      ['-package-db simple-plugin/pkg.plugins03/local.package.conf -fplugin Simple.NonExistentPlugin -package simple-plugin'])
 
-test('plugins04', [extra_files(['HomePackagePlugin.hs']),
-                   only_ways([config.ghc_plugin_way]),
-                   when(opsys('mingw32'), multi_cpu_race)],
+test('plugins04',
+     [extra_files(['HomePackagePlugin.hs']),
+      only_ways([config.ghc_plugin_way]),
+      when(opsys('mingw32'), multi_cpu_race)],
      multimod_compile_fail,
      ['plugins04', '-package ghc -fplugin HomePackagePlugin'])
 
@@ -208,3 +209,9 @@ test('T15858',
       extra_hc_opts("-package-db plugin-recomp/pkg.plugins01/local.package.conf ")
       ],
      ghci_script, ['T15858.script'])
+
+test('T16104',
+     [extra_files(['T16104-plugin/']),
+      pre_cmd('$MAKE -s --no-print-directory -C T16104-plugin package.T16104-plugin TOP={top}')
+     ],
+     run_command, ['$MAKE -s --no-print-directory T16104'])
